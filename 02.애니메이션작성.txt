
01.SVG line 애니메이션제작
1.public폴더에 있는 

 vis_line2.svg, vis_line3.svg을 스크롤에 따라 그림그리듯 그려지는
애니메이션을 만들려고 해
gsap.scrollTrigger를 활용해서 스크롤의 위치에 따라 라인이 그려지는  애니메이션을 만들어줘
---------------------------
애니메이션이 전혀 적요되지 않았어..
처음에는 안보이다가 스크롤을 내릴 때 라인이 그려지듯 나타나야지...정확하게 해줘

--------------------------------------------------

아직도 처음부터 보이고,  vis_line2.svg, vis_line3.svg는 위치도 완전히 틀려졌어 다시 제대로 해줘봐
https://jyoung.pe.kr/student_portfolio/01/index.html 이 페이지를 참고해서 정확하게만들어줘

-------------------------------------------
전혀 동작이 안되고, vis_line2.svg, vis_line3.svg는 위치도 여전히 틀려져 있어. 이거 너 못하는거야?

커서 : SVG들이 인라인 img로 되어 있어서 path에 직접 접근할 수 없습니다. 
SVG를 인라인으로 변경하고 위치를 정확히 수정하겠습니다.
-----------------------------------------------------------------
나 :   vis_line2.svg는 되는데, vis_line1.svg는 스크롤할 공간이 없으니까
화면이 로딩되면 라인일러스트가 진행되도록 해줘

커서:  해결됨
----------------------------------------------------------------------
나 : 참고이미지를 봐봐.. vis_line2.svg는 지금 자리가 이상하게 되어 있어..
 원래위치에서 진행되도록 해줘

vis_line2.svg라인이 더 길게 되었는데 조금만 더 짧게 수정해줘
vis_line1.svg은 조금 더 길게 해주고 검정색으로 바꿔줘

내가 직접 위치를 수정하고 싶어 어디서 해야해

.vis-line3 {
    position: absolute;
    top: -40px;
    right: 560px;
    width: 46px;
    height: 39px;
    z-index: 1;
}

vis_line3.svg은 절대로 현재 위치에서 움직이지 말고,  안보이다가 .vis-line2의 애니메이션이 끝난다음
나타나서 진행되게 해줘


마찬가지로 ab_line1.svg도 같은 방법으로 처음에는 안보이다가  스크롤이 위치해 있을 때
라인애니메이션이 진행되게 해줘 

와우 좋아.
지금과 같은 방법으로 ab_line2.svg, ab_line3.svg,도 같은 방법으로 처음에는 안보이다가  스크롤이 위치해 있을 때 라인애니메이션이 진행되게 해줘 

------------------------------------------------------------------------------
02.visual텍스트 애니메이션(React Bits - Split Test 참고)
.visual-section에 .title-text에 애니메이션을 적용하려고 하는데
 React Bits의 Split Text애니메이션을 참고해서 만들어줘
단 스크롤을 내릴 때 한줄씩 진행되게 해줘

Usage----------------------------------------------------

import SplitText from "./SplitText";

const handleAnimationComplete = () => {
  console.log('All letters have animated!');
};

<SplitText
  text="Hello, GSAP!"
  className="text-2xl font-semibold text-center"
  delay={100}
  duration={0.6}
  ease="power3.out"
  splitType="chars"
  from={{ opacity: 0, y: 40 }}
  to={{ opacity: 1, y: 0 }}
  threshold={0.1}
  rootMargin="-100px"
  textAlign="center"
  onLetterAnimationComplete={handleAnimationComplete}
/>



JavaScript-------------------------------------------------
import { useRef, useEffect, useState } from 'react';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { SplitText as GSAPSplitText } from 'gsap/SplitText';
import { useGSAP } from '@gsap/react';

gsap.registerPlugin(ScrollTrigger, GSAPSplitText, useGSAP);

const SplitText = ({
  text,
  className = '',
  delay = 100,
  duration = 0.6,
  ease = 'power3.out',
  splitType = 'chars',
  from = { opacity: 0, y: 40 },
  to = { opacity: 1, y: 0 },
  threshold = 0.1,
  rootMargin = '-100px',
  textAlign = 'center',
  tag = 'p',
  onLetterAnimationComplete
}) => {
  const ref = useRef(null);
  const animationCompletedRef = useRef(false);
  const [fontsLoaded, setFontsLoaded] = useState(false);

  useEffect(() => {
    if (document.fonts.status === 'loaded') {
      setFontsLoaded(true);
    } else {
      document.fonts.ready.then(() => {
        setFontsLoaded(true);
      });
    }
  }, []);

  useGSAP(
    () => {
      if (!ref.current || !text || !fontsLoaded) return;
      const el = ref.current;

      if (el._rbsplitInstance) {
        try {
          el._rbsplitInstance.revert();
        } catch (_) {
          /* noop */
        }
        el._rbsplitInstance = null;
      }

      const startPct = (1 - threshold) * 100;
      const marginMatch = /^(-?\d+(?:\.\d+)?)(px|em|rem|%)?$/.exec(rootMargin);
      const marginValue = marginMatch ? parseFloat(marginMatch[1]) : 0;
      const marginUnit = marginMatch ? marginMatch[2] || 'px' : 'px';
      const sign =
        marginValue === 0
          ? ''
          : marginValue < 0
            ? `-=${Math.abs(marginValue)}${marginUnit}`
            : `+=${marginValue}${marginUnit}`;
      const start = `top ${startPct}%${sign}`;

      let targets;
      const assignTargets = self => {
        if (splitType.includes('chars') && self.chars.length) targets = self.chars;
        if (!targets && splitType.includes('words') && self.words.length) targets = self.words;
        if (!targets && splitType.includes('lines') && self.lines.length) targets = self.lines;
        if (!targets) targets = self.chars || self.words || self.lines;
      };

      const splitInstance = new GSAPSplitText(el, {
        type: splitType,
        smartWrap: true,
        autoSplit: splitType === 'lines',
        linesClass: 'split-line',
        wordsClass: 'split-word',
        charsClass: 'split-char',
        reduceWhiteSpace: false,
        onSplit: self => {
          assignTargets(self);
          const tween = gsap.fromTo(
            targets,
            { ...from },
            {
              ...to,
              duration,
              ease,
              stagger: delay / 1000,
              scrollTrigger: {
                trigger: el,
                start,
                once: true,
                fastScrollEnd: true,
                anticipatePin: 0.4
              },
              onComplete: () => {
                animationCompletedRef.current = true;
                onLetterAnimationComplete?.();
              },
              willChange: 'transform, opacity',
              force3D: true
            }
          );
          return tween;
        }
      });

      el._rbsplitInstance = splitInstance;

      return () => {
        ScrollTrigger.getAll().forEach(st => {
          if (st.trigger === el) st.kill();
        });
        try {
          splitInstance.revert();
        } catch (_) {
          /* noop */
        }
        el._rbsplitInstance = null;
      };
    },
    {
      dependencies: [
        text,
        delay,
        duration,
        ease,
        splitType,
        JSON.stringify(from),
        JSON.stringify(to),
        threshold,
        rootMargin,
        fontsLoaded,
        onLetterAnimationComplete
      ],
      scope: ref
    }
  );

  const renderTag = () => {
    const style = {
      textAlign,
      overflow: 'hidden',
      display: 'inline-block',
      whiteSpace: 'normal',
      wordWrap: 'break-word',
      willChange: 'transform, opacity'
    };
    const classes = `split-parent ${className}`;
    switch (tag) {
      case 'h1':
        return (
          <h1 ref={ref} style={style} className={classes}>
            {text}
          </h1>
        );
      case 'h2':
        return (
          <h2 ref={ref} style={style} className={classes}>
            {text}
          </h2>
        );
      case 'h3':
        return (
          <h3 ref={ref} style={style} className={classes}>
            {text}
          </h3>
        );
      case 'h4':
        return (
          <h4 ref={ref} style={style} className={classes}>
            {text}
          </h4>
        );
      case 'h5':
        return (
          <h5 ref={ref} style={style} className={classes}>
            {text}
          </h5>
        );
      case 'h6':
        return (
          <h6 ref={ref} style={style} className={classes}>
            {text}
          </h6>
        );
      default:
        return (
          <p ref={ref} style={style} className={classes}>
            {text}
          </p>
        );
    }
  };
  return renderTag();
};

export default SplitText;

참고 레퍼런스는 한글자씩 통통튀게 올라오는 글자인데 결과물 낱글자가 통통튀질 않아
애니메이션 구현을 잘 확인하고 해줘

너는 글자크기가 변화되면서 통통튀는데 글자크기는 변화되지 않고 자기자리에서 낱글자가 점프하듯이 튀어
오르는 애니메이션이야 제대로 수정해줘


.visual-des글자는 한줄씩 slideUp되어 나타나는 애니메이션을 적용해줘


.ab-me-text, .project-title , .contact-title 타이틀도 .main-title과 동일한 애니메이션을 적용해줘

이번에는 .main-title글자가 처음엔 애니메이션이 진행되다가 스크롤을 내렸다가 다시 되감기로 올라가면
사라져서 안나타나...ㅠ.ㅠ 제대로 고쳐줘

그냥 모든글자에 되감기에는 적용하지 말아줘 너무 애니메이션이 불안정해..차라리 그냥 스크롤을 내릴때만 애니메이션이 진행되게 해줘





























































